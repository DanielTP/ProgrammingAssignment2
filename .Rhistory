install packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
library(httr) # Tools for Working with URLs and HTTP
library(XML)
shopid = 582525
ipage = 1
strurl <- paste0
strurl <- paste0("http://www.dianping.com/shop/", shopid, "/review_more?pageno=", ipage)
strurl
HttpHeader <- list(
"Connection" = "keep-alive",
"Accept" = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
"User-Agent" = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36",
"Referer" = strurl,
"Accept-Encoding" = "gzip,deflate,sdch",
"Accept-Language" = "zh-CN,zh;q=0.8,en;q=0.6"
)
htmlcon <- GET(url=strurl, config=add_headers(.headers = unlist(HttpHeader))) # GET a url. "response"
htmlstr <- content(htmlcon, "text", encoding = "UTF-8") # Extract content from a request. "character"
pagetree <- htmlParse(htmlstr, asText = TRUE, encoding = "UTF-8")
tmp.id <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']/ul/li"), xmlGetAttr, "data-id") # ????d
tmp.comment <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//div[@class = 'comment-txt']"), xmlValue) # ???????
tmp.price <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//div[@class = 'content']/div[@class = 'user-info']"), xmlValue) # ???
tmp.time <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//span[@class = 'time']"), xmlValue) # ???????
tmp.username <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//p[@class = 'name']"), xmlValue) # ???????
tmp.score <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//div[@class = 'comment-rst']"), xmlValue) # ?????
tmp.userrank <- sapply(getNodeSet(pagetree, "//body//div[@class = 'comment-list']//p[@class = 'contribution']/span"), xmlGetAttr, "class") # ??蝙??ank
tmp.comment <- gsub("\\s+", "", tmp.comment) # ???n\n                \n蝑?
tmp.price <- as.numeric(gsub("^[^0-9]*", "", sapply(strsplit(gsub("\\s+", "", tmp.price), split = "|", fixed = TRUE), "[[", 1))) # gsub("^[^0-9]*", "", ...銝?摮?蝘駁????
tmp.time <- sapply(strsplit(tmp.time, split = "\\s+"), "[[", 1)
tmp.time[nchar(gsub("[0-9]", "", tmp.time)) < 2] <- paste0(format(Sys.time(), "%y"), "-", tmp.time[nchar(gsub("[0-9]", "", tmp.time)) < 2]) # "06-03"頧??"15-06-03"
tmp.score <- strsplit(gsub("[^0-9]", "", gsub("\\s+", "", tmp.score)), split = "") # ???mp.score銝苒n\n                \n蝑??????摮?????敺???憓????????
tmp.taste <- as.numeric(sapply(tmp.score, "[[", 1)) # ??????
tmp.envir <- as.numeric(sapply(tmp.score, "[[", 2)) # ??????
tmp.service <- as.numeric(sapply(tmp.score, "[[", 3)) # ??????
tmp.userrank <- as.numeric(gsub("[^0-9]", "", tmp.userrank)) # ??雿輻?ank
# ????蝯?? data.frame
OUT <- data.frame(
StoreID = shopid,
ID  = tmp.id,
Comment = tmp.comment,
Date = tmp.time,
Price = tmp.price,
Envir = tmp.envir,
Service = tmp.service,
Taste = tmp.taste,
Sum = mean(c(tmp.envir, tmp.service, tmp.taste)),
Sen = 0,
stringsAsFactors = FALSE
)
tmp.time
tmp.score
OUT
names(OUT)
install.packages("tmcn", repos = "http://R-Forge.R-project.org", type="source")
library(tmcn)
library(Rwordseg)
install.packages("shiny")
library(shiny)
runExample("01_hello")
install.packages("googleVis")
install.packages("XLConnect")
install.packages("devtools")
devtools::install_github("rstudio/DT")
library(shiny)
runExample("01_hello")
library(shiny)
library(XLConnect)
x <- 0:6
class(x)
as.numeric(x)
class(x)
as.character(x)
class(x)
attribute(x)
m <- 1:10
dim(m) <- c(2,5)
m
setwd("D:/R_Practice")
directory <- "D:/R_Practice/specdata"
setwd(direcotry)
setwd(directory)
read.csv("00.csv")
read.csv("001.csv")
id <- 23
judge <- data.frame(id)
if nrow(judge)>1
else {
id <- 23
judge <- data.frame(id)
if (nrow(judge)>1) {}
} else {
dataname <- num(id)
airdata <- read.csv(dataname)
source("pollutantmean.R"")
source(pollutantmean.R)
source("pollutantmean.R"")
source("pollutantmean.R")
source(pollutantmean.R)
id <- 23
judge <- data.frame(id)
if (nrow(judge)>1) {
} else {
dataname <- num(id)
airdata <- read.csv(dataname)
pollutant <- "sulfate"
id <- 23
judge <- data.frame(id)
if (nrow(judge)>1) {
} else {
dataname <- num(id)
airdata <- read.csv(dataname)
good <- complete.cases(airdata)
}
airdata_new <- airdata[good,]
if (pollutant=="sulfate") {
mean(airdata_new[,2])
} else{
mean(airdata_new[,3])
}
getwd()
source("pollutantmean.R")
x <- getwd()
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
setwd(directory)
judge <- data.frame(id)
endno <- nrow(judge)
endno <- nrow(judge)
if (endno>1) {
for (i in 1:endno) {
dataname <- filename(id[i])
airdata_good <- dataclean(dataname,pollutant)
if (i>1) {
airdata_new <- rbind(airdata_new,airdata_good)
} else {
airdata_new <- airdata_good
}
}
} else {
dataname <- filename(id)
airdata_new <- dataclean(dataname,pollutant)
}
mean_col <-mean(airdata_new)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
source("pollutantmean.R")
pollutantmean(x,"nitrate",23)
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
source("pollutantmean.R")
pollutantmean(x,"nitrate",70:72)
pollutantmean(x,"sulfate",1:10)
setwd("D:/R_Practice")
pollutantmean(specdata,"nitrate",70:72)
pollutantmean("specdata","nitrate",70:72)
source("complete.R")
source("complete.R")
complete("specdata",1)
getwd()
setwd("D:/R_Practice")
complete("specdata",1)
setwd("D:/R_Practice")
source("complete.R")
setwd("D:/R_Practice/PA2/ProgrammingAssignment2")
